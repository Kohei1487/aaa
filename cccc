import time
import math
import os
import board
import busio
from adafruit_ads1x15.ads1x15 import ADS1115
from adafruit_ads1x15.analog_in import AnalogIn

# コンフィギュレーションレジスタの設定 (2)
def set_config_register(ads, mux):
    # 明示的な設定は不要。`AnalogIn`がチャネルに基づいてmuxの設定を管理します。
    pass

# 電流のRMS値を読み取る (3)
def read_current_rms(ads, channel, FS, N, R):
    NUMBER = 1400  # サンプリング数
    sum_squared = 0.0  # 二乗和
    for _ in range(NUMBER):
        e = channel.voltage  # チャネルから電圧を取得
        i = e * N / R  # 巻き線比と抵抗から電流を計算
        sum_squared += i ** 2

    return math.sqrt(sum_squared / NUMBER)  # RMS値を返す

# メイン関数
def main():
    # I2CとADS1115の初期化
    i2c = busio.I2C(board.SCL, board.SDA)
    ads = ADS1115(i2c)
    ads.gain = 1  # ゲインの設定（FSの計算に対応）

    R = 300  # 負荷抵抗値（Ω）
    N = 3000  # 巻き線比
    FS = 4.096  # ゲイン1でのフルスケール電圧 (ADS1115)

    print(f"測定開始: {time.strftime('%Y/%m/%d %H:%M:%S')}")

    while True:
        # チャネル0 (AIN0)
        chan0 = AnalogIn(ads, ADS1115.P0)
        i_rms0 = read_current_rms(ads, chan0, FS, N, R)

        # チャネル1 (AIN1)
        chan1 = AnalogIn(ads, ADS1115.P1)
        i_rms1 = read_current_rms(ads, chan1, FS, N, R)

        # データをファイルに保存
        filename = f"wattmeter/{time.strftime('%Y%m%d')}wattmeter.txt"
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        with open(filename, "a") as file:
            date_time = time.strftime('%Y/%m/%d %H:%M:%S')
            file.write(f"{date_time}, {i_rms0 * 100.0:.6f}, {i_rms1 * 100.0:.6f}\n")
            print(f"{date_time}, {i_rms0 * 100.0:.6f}, {i_rms1 * 100.0:.6f}")

if __name__ == "__main__":
    main()


