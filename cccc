import time
import math
import smbus2
import os

# Set configuration register (2)
def set_config_register(bus, ads_address, mux, pga, dr):
    register_byte = [0] * 3
    register_byte[0] = 1  # Select config register
    register_byte[1] = 0x80 | (mux << 4) | (pga << 1)  # Set mux and pga
    register_byte[2] = 0x03 | (dr << 5)  # Set data rate
    bus.write_i2c_block_data(ads_address, register_byte[0], register_byte[1:])

# Read current RMS (3)
def read_current_rms(bus, ads_address, FS, N, R):
    register_byte = [0] * 2
    bus.write_byte(ads_address, 0)  # Select conversion register

    NUMBER = 1400
    sum_squared = 0.0
    for _ in range(NUMBER):
        data = bus.read_i2c_block_data(ads_address, 0, 2)
        val = ((data[0] + 128) % 256 - 128) * 256 + data[1]  # 2's complement conversion
        e = val * FS / 32768.0  # Secondary voltage
        i = e * N / R  # Primary current calculation using turn ratio and resistance
        sum_squared += i ** 2

    return math.sqrt(sum_squared / NUMBER)  # RMS value

# Main function
def main():
    bus = smbus2.SMBus(1)  # Open I2C bus 1
    ads_address = 0x48  # I2C address for the device
    mux = 0b000  # Input channel
    pga = 0b001  # PGA setting
    dr = 0b111  # Data rate
    R = 300  # Load resistor value
    N = 3000  # Turn ratio

    if 0b001 <= pga <= 0b100:
        FS = 4.096 / (2 ** (pga - 1))  # Full-scale voltage
    else:
        print("Error: Couldn't convert to FS!")
        return

    print(f"Measurement start: {time.strftime('%Y/%m/%d %H:%M:%S')}")

    while True:
        # Channel 0
        mux = 0b100
        set_config_register(bus, ads_address, mux, pga, dr)
        i_rms0 = read_current_rms(bus, ads_address, FS, N, R)

        # Channel 1
        mux = 0b101
        set_config_register(bus, ads_address, mux, pga, dr)
        i_rms1 = read_current_rms(bus, ads_address, FS, N, R)

        # Save data to file
        filename = f"wattmeter/{time.strftime('%Y%m%d')}wattmeter.txt"
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        with open(filename, "a") as file:
            date_time = time.strftime('%Y/%m/%d %H:%M:%S')
            file.write(f"{date_time}, {i_rms0 * 100.0:.6f}, {i_rms1 * 100.0:.6f}\n")
            print(f"{date_time}, {i_rms0 * 100.0:.6f}, {i_rms1 * 100.0:.6f}")

if __name__ == "__main__":
    main()
